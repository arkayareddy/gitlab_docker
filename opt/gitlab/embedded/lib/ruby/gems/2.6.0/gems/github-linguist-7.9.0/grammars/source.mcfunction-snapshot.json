{
  "name": "mcfunction-snapshot",
  "scopeName": "source.mcfunction-snapshot",
  "patterns": [
    {
      "include": "#comment.block"
    },
    {
      "include": "#comment.plain"
    },
    {
      "include": "#command"
    },
    {
      "include": "#unknown"
    }
  ],
  "repository": {
    "advancement_map.content": {
      "patterns": [
        {
          "include": "#common.block"
        }
      ]
    },
    "command": {
      "name": "meta._.command.mcfunction",
      "begin": "^[ \\t]*(?=[^\\s#])",
      "end": "\\n",
      "patterns": [
        {
          "include": "#commands"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "include": "#generated.commands"
        }
      ]
    },
    "comment.block": {
      "patterns": [
        {
          "name": "meta._.block.comment.mcfunction",
          "begin": "^[ \\t]*((#)(\u003e)((.*)))$",
          "end": "^(?![ \\t]*#)",
          "patterns": [
            {
              "include": "#comment.block.lines"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "comment.block._.block.comment.mcfunction"
            },
            "2": {
              "name": "markup.list._.symbol.block.comment.mcfunction"
            },
            "3": {
              "name": "markup.list._.prefix.block.comment.mcfunction"
            },
            "4": {
              "name": "markup.bold._.heading_1.block.comment.mcfunction"
            },
            "5": {
              "name": "markup.list._.heading_2.block.comment.mcfunction"
            }
          }
        }
      ]
    },
    "comment.block.line": {
      "patterns": [
        {
          "name": "meta._.annotation.line.block.comment.mcfunction",
          "match": "((\\@\\w*)\\b(.*))$",
          "captures": {
            "1": {
              "name": "comment.block._.block.comment.mcfunction"
            },
            "2": {
              "name": "markup.heading._.label.annotation.block.comment.mcfunction"
            },
            "3": {
              "name": "comment.block._.text.annotation.block.comment.mcfunction"
            }
          }
        },
        {
          "name": "meta._.heading.line.block.comment.mcfunction",
          "match": "((\u003e)((.*)))$",
          "captures": {
            "1": {
              "name": "comment.block._.block.comment.mcfunction"
            },
            "2": {
              "name": "markup.list._.prefix.block.comment.mcfunction"
            },
            "3": {
              "name": "markup.bold._.heading_1.block.comment.mcfunction"
            },
            "4": {
              "name": "markup.list._.heading_2.block.comment.mcfunction"
            }
          }
        },
        {
          "name": "meta._.text.line.block.comment.mcfunction",
          "match": "(.*)$",
          "captures": {
            "1": {
              "name": "comment.block._.block.comment.mcfunction"
            }
          }
        }
      ]
    },
    "comment.block.lines": {
      "patterns": [
        {
          "name": "meta._.lines.block.comment.mcfunction",
          "begin": "^[ \\t]*((#)[ \\t]*)",
          "end": "$",
          "patterns": [
            {
              "include": "#comment.block.line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "comment.block._.block.comment.mcfunction"
            },
            "2": {
              "name": "markup.list._.symbol.block.comment.mcfunction"
            }
          }
        }
      ]
    },
    "comment.plain": {
      "patterns": [
        {
          "name": "meta._.plain.comment.mcfunction",
          "match": "^[ \\t]*(#.*)$",
          "captures": {
            "1": {
              "name": "comment._.plain.comment.mcfunction"
            }
          }
        }
      ]
    },
    "common.block": {
      "patterns": [
        {
          "name": "string._.content.dict.generic.mcfunction",
          "match": "[^\\n\\{\\}\\[\\]\\\"\\']+"
        },
        {
          "include": "#common.dict"
        },
        {
          "include": "#common.list"
        },
        {
          "include": "#common.quoted_string"
        }
      ]
    },
    "common.boolean": {
      "patterns": [
        {
          "name": "constant.numeric._.boolean.mcfunction",
          "match": "(?\u003c!\\w)(true|false)(?!\\w)"
        }
      ]
    },
    "common.dict": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#common.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.dict.generic.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.dict.generic.mcfunction"
            }
          }
        }
      ]
    },
    "common.dict.whitespace": {
      "patterns": [
        {
          "match": "(?\u003c=[\\{\\,]) +(?=[^\\}\\,])"
        },
        {
          "match": "(?\u003c=[^\\{\\,]) +(?=[\\}\\,])"
        },
        {
          "match": "(?\u003c=\\{) +(?=\\})"
        }
      ]
    },
    "common.double_quoted_string": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#common.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "common.double_quoted_string.content": {
      "patterns": [
        {
          "name": "string._.string.mcfunction",
          "match": "[^\\\\\\\"\\n]"
        },
        {
          "name": "constant.character.escape._.string_escape.mcfunction",
          "match": "\\\\[^\\n]"
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "common.double_range": {
      "patterns": [
        {
          "match": "(\\-?\\d*\\.?\\d+)(\\.\\.)(\\-?\\d*\\.?\\d+)?",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "match": "(\\-?\\d*\\.?\\d+)?(\\.\\.)(\\-?\\d*\\.?\\d+)",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "name": "constant.numeric._.number.mcfunction",
          "match": "(\\-?\\d*\\.?\\d+)"
        }
      ]
    },
    "common.integer_range": {
      "patterns": [
        {
          "match": "(\\-?\\d+)(\\.\\.)(\\-?\\d+)?",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "match": "(\\-?\\d+)?(\\.\\.)(\\-?\\d+)",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "name": "constant.numeric._.number.mcfunction",
          "match": "(\\-?\\d+)"
        }
      ]
    },
    "common.list": {
      "patterns": [
        {
          "begin": "(\\[)",
          "end": "(?=\\n)|(\\])",
          "patterns": [
            {
              "include": "#common.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.list.generic.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.list.generic.mcfunction"
            }
          }
        }
      ]
    },
    "common.list.whitespace": {
      "patterns": [
        {
          "match": "(?\u003c=[\\[\\,]) +(?=[^\\]\\,])"
        },
        {
          "match": "(?\u003c=[^\\[\\,]) +(?=[\\]\\,])"
        },
        {
          "match": "(?\u003c=\\[) +(?=\\])"
        }
      ]
    },
    "common.message": {
      "patterns": [
        {
          "name": "string._.string.mcfunction",
          "match": "([^\\@\\n]+)"
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)|(\\])",
          "patterns": [
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        },
        {
          "name": "support.class._.base.target_selector.mcfunction",
          "match": "(\\@[parse])"
        },
        {
          "name": "string._.string.mcfunction",
          "match": "([^\\n])"
        }
      ]
    },
    "common.number": {
      "patterns": [
        {
          "name": "constant.numeric._.number.mcfunction",
          "match": "(?\u003c!\\d)(\\-?\\d*\\.?\\d+)(?!\\d)"
        }
      ]
    },
    "common.position": {
      "patterns": [
        {
          "include": "#common.position.abs_rel"
        },
        {
          "include": "#common.position.local"
        }
      ]
    },
    "common.position.abs_rel": {
      "patterns": [
        {
          "match": "(?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+))",
          "captures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        }
      ]
    },
    "common.position.local": {
      "patterns": [
        {
          "match": "(\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)?",
          "captures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "common.quotable_string": {
      "patterns": [
        {
          "include": "#common.quoted_string"
        },
        {
          "include": "#common.unquoted_string"
        }
      ]
    },
    "common.quoted_string": {
      "patterns": [
        {
          "include": "#common.double_quoted_string"
        },
        {
          "include": "#common.single_quoted_string"
        }
      ]
    },
    "common.resource_id": {
      "patterns": [
        {
          "match": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)",
          "captures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "common.resource_location": {
      "patterns": [
        {
          "match": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)",
          "captures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "common.single_quoted_string": {
      "patterns": [
        {
          "begin": "(\\')",
          "end": "(?=\\n)|(\\')",
          "patterns": [
            {
              "include": "#common.single_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "common.single_quoted_string.content": {
      "patterns": [
        {
          "name": "string._.string.mcfunction",
          "match": "[^\\\\\\'\\n]"
        },
        {
          "name": "constant.character.escape._.string_escape.mcfunction",
          "match": "\\\\[^\\n]"
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "common.taggable_resource_location": {
      "patterns": [
        {
          "include": "#common.tagged_resource_location"
        },
        {
          "include": "#common.resource_location"
        }
      ]
    },
    "common.tagged_resource_location": {
      "patterns": [
        {
          "match": "(\\#)(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)",
          "captures": {
            "1": {
              "name": "entity.name.function._.hash.tagged_resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.namespace.tagged_resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.colon.tagged_resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.tagged_resource_location.mcfunction"
            },
            "5": {
              "name": "entity.name.function._.path.tagged_resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "common.trailing_whitespace": {
      "patterns": [
        {
          "name": "meta._.trailing_whitespace.common.mcfunction",
          "begin": "[ \\t]*",
          "end": "(?=\\n)",
          "patterns": [
            {
              "match": "((\\S))",
              "captures": {
                "1": {
                  "name": "invalid.illegal._.invalid.mcfunction"
                },
                "2": {
                  "name": "markup.underline._.underline.mcfunction"
                }
              }
            }
          ]
        }
      ]
    },
    "common.unquoted_string": {
      "patterns": [
        {
          "name": "string._.word.mcfunction",
          "match": "([\\w\\.\\-\\+]+)"
        }
      ]
    },
    "error.bad_syntax": {
      "name": "meta._.bad_syntax.error.mcfunction",
      "match": "((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    },
    "error.block": {
      "patterns": [
        {
          "match": "(([^\\n\\{\\}\\[\\]\\\"\\']+))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "include": "#error.block_value"
        }
      ]
    },
    "error.block_value": {
      "patterns": [
        {
          "include": "#error.dict"
        },
        {
          "include": "#error.list"
        },
        {
          "include": "#error.quoted_string"
        }
      ]
    },
    "error.command_line": {
      "name": "meta._.unknown_command.mcfunction",
      "match": "((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    },
    "error.compound_value": {
      "patterns": [
        {
          "include": "#error.block_value"
        },
        {
          "match": "(([^\\n\\}\\,]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.dict": {
      "patterns": [
        {
          "begin": "((\\{))",
          "end": "((?=\\n)|(\\}))",
          "patterns": [
            {
              "include": "#error.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.double_quoted_string": {
      "patterns": [
        {
          "begin": "((\\\"))",
          "end": "((?=\\n)|(\\\"))",
          "patterns": [
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.double_quoted_string.content": {
      "patterns": [
        {
          "match": "(([^\\\\\\\"\\n]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "match": "((\\\\[^\\n]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.invalid_node": {
      "name": "meta._.invalid_node.error.mcfunction",
      "match": "((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    },
    "error.list": {
      "patterns": [
        {
          "begin": "((\\[))",
          "end": "((?=\\n)|(\\]))",
          "patterns": [
            {
              "include": "#error.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.list_value": {
      "patterns": [
        {
          "include": "#error.block_value"
        },
        {
          "match": "(([^\\n\\]\\,]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.quoted_string": {
      "patterns": [
        {
          "include": "#error.double_quoted_string"
        },
        {
          "include": "#error.single_quoted_string"
        }
      ]
    },
    "error.single_quoted_string": {
      "patterns": [
        {
          "begin": "((\\'))",
          "end": "((?=\\n)|(\\'))",
          "patterns": [
            {
              "include": "#error.single_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.single_quoted_string.content": {
      "patterns": [
        {
          "match": "(([^\\\\\\'\\n]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "match": "((\\\\[^\\n]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.unknown_parser": {
      "name": "meta._.unknown_parser.error.mcfunction",
      "match": "((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    },
    "error.unmatched_child": {
      "name": "meta._.unmatched_child.error.mcfunction",
      "match": "((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    },
    "generated.command.data": {
      "begin": "(data) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.data.get": {
      "begin": "(get) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.get"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.get.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.get.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.get.block.targetPos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.get.block.targetPos.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.get.block.targetPos.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.get.block.targetPos.path.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.block.targetPos.path.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.get.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.get.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.get.entity.target": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.get.entity.target"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.get.entity.target.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.get.entity.target.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.get.entity.target.path.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.entity.target.path.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.get.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.get.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.get.storage.target": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.storage.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.get.storage.target.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.get.storage.target.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.get.storage.target.path.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.get.storage.target.path.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.merge": {
      "begin": "(merge) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.merge"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.merge.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.merge.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.merge.block.targetPos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.merge.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.merge.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.merge.block.targetPos.nbt": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.merge.block.targetPos.nbt"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.merge.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.merge.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.merge.entity.target": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.merge.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.merge.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.merge.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.merge.entity.target"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.merge.entity.target.nbt": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.merge.entity.target.nbt"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.merge.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.merge.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.merge.storage.target": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.merge.storage.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.merge.storage.target.nbt": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.merge.storage.target.nbt"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify": {
      "begin": "(modify) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.append": {
      "begin": "(append) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.append"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.append.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.append.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert": {
      "begin": "(insert) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index": {
      "patterns": [
        {
          "begin": "(\\-?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.insert.index.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.insert.index.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge": {
      "begin": "(merge) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.merge.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.merge.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend": {
      "begin": "(prepend) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.prepend.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.prepend.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.set": {
      "begin": "(set) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.set"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.block.targetPos.targetPath.set.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.block.targetPos.targetPath.set.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.append": {
      "begin": "(append) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.append"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.append.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.append.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.append.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.append.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.append.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.append.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.append.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.append.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.append.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.append.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.insert": {
      "begin": "(insert) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.insert"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index": {
      "patterns": [
        {
          "begin": "(\\-?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.insert.index.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.insert.index.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.merge": {
      "begin": "(merge) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.merge"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.merge.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.merge.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.merge.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.merge.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.merge.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.merge.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.merge.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.merge.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.prepend": {
      "begin": "(prepend) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.prepend"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.prepend.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.prepend.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.set": {
      "begin": "(set) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.set"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.set.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.set.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.set.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.set.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.entity.target.targetPath.set.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.entity.target.targetPath.set.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.entity.target.targetPath.set.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.entity.target.targetPath.set.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.set.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.entity.target.targetPath.set.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.append": {
      "begin": "(append) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.append"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.append.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.append.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.append.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.append.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.append.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.append.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.append.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.append.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.append.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.append.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.insert": {
      "begin": "(insert) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.insert"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index": {
      "patterns": [
        {
          "begin": "(\\-?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.insert.index.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.insert.index.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.merge": {
      "begin": "(merge) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.merge"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.merge.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.merge.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.merge.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.merge.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.merge.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.merge.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.merge.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.merge.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.prepend": {
      "begin": "(prepend) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.prepend"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.prepend.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.prepend.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.set": {
      "begin": "(set) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.set"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.set.from": {
      "begin": "(from) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.set.from"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+))( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.block.sourcePos.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.entity.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.entity.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.set.from.storage.source.sourcePath": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.set.from.storage.source.sourcePath"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.modify.storage.target.targetPath.set.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.modify.storage.target.targetPath.set.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.modify.storage.target.targetPath.set.value.value": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.modify.storage.target.targetPath.set.value.value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        },
        {
          "begin": "(\\{)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\})|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.set.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_compound.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])|(?=\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.modify.storage.target.targetPath.set.value.value"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "storage._.bracket.nbt_list.mcfunction"
                }
              }
            },
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.remove": {
      "begin": "(remove) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.remove"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.remove.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.remove.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.remove.block.targetPos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.remove.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.remove.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.remove.block.targetPos.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.remove.block.targetPos.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.remove.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.remove.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.remove.entity.target": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.remove.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.remove.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.remove.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.remove.entity.target"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.remove.entity.target.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.remove.entity.target.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.remove.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.data.remove.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.data.remove.storage.target": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.data.remove.storage.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.data.remove.storage.target.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.data.remove.storage.target.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.effect": {
      "begin": "(effect) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.effect"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.effect.clear": {
      "begin": "(clear)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.effect.clear"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.effect.clear.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.clear.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.clear.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.clear.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.effect.clear.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.effect.clear.targets.effect": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.clear.targets.effect"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.effect.give": {
      "begin": "(give) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.effect.give"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.effect.give.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.give.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.give.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.give.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.effect.give.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.effect.give.targets.effect": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.give.targets.effect"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.effect.give.targets.effect.seconds": {
      "patterns": [
        {
          "begin": "(0*[1-9]\\d*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.give.targets.effect.seconds"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.effect.give.targets.effect.seconds.amplifier": {
      "patterns": [
        {
          "begin": "(\\d+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.give.targets.effect.seconds.amplifier"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.effect.give.targets.effect.seconds.amplifier.hideParticles": {
      "patterns": [
        {
          "begin": "(true|false)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.effect.give.targets.effect.seconds.amplifier.hideParticles"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.boolean.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute": {
      "begin": "(execute) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.execute.align": {
      "begin": "(align) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.align"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.align.axes": {
      "patterns": [
        {
          "begin": "(x|y|z|xy|xz|yz|xyz) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.align.axes"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.swizzle.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.anchored": {
      "begin": "(anchored) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.anchored"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.anchored.anchor": {
      "patterns": [
        {
          "begin": "(eyes|feet) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.anchored.anchor"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.entity_anchor.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.as": {
      "begin": "(as) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.as"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.as.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.as.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.at": {
      "begin": "(at) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.at"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.at.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.at.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.at.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.at.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.at.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.facing": {
      "begin": "(facing) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.facing"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.facing.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.facing.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.facing.entity.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.facing.entity.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.facing.entity.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.facing.entity.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.facing.entity.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.facing.entity.targets.anchor": {
      "patterns": [
        {
          "begin": "(eyes|feet) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.facing.entity.targets.anchor"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.entity_anchor.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.facing.pos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.facing.pos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.facing.pos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if": {
      "begin": "(if) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.block.pos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.block.pos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.block.pos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.block.pos.block": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.block.pos.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        },
        {
          "begin": "(\\#)(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.block.pos.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.hash.tagged_resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.namespace.tagged_resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.colon.tagged_resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.tagged_resource_location.mcfunction"
            },
            "5": {
              "name": "entity.name.function._.path.tagged_resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.blocks": {
      "begin": "(blocks) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.blocks"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.blocks.start": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.blocks.start"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.blocks.start"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.blocks.start.end": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.blocks.start.end"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.blocks.start.end"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.blocks.start.end.destination": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.blocks.start.end.destination"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.blocks.start.end.destination"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.blocks.start.end.destination.all": {
      "begin": "(all)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.blocks.start.end.destination.all"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.blocks.start.end.destination.masked": {
      "begin": "(masked)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.blocks.start.end.destination.masked"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.data": {
      "begin": "(data) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.data"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.data.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.data.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.data.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.data.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.data.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.data.block.sourcePos.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.data.block.sourcePos.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.data.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.data.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.data.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.data.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.data.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.data.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.data.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.data.entity.source.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.data.entity.source.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.data.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.data.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.data.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.data.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.data.storage.source.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.data.storage.source.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.entity.entities": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.entity.entities"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.entity.entities"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.entity.entities"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.entity.entities"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.predicate": {
      "begin": "(predicate) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.predicate"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.predicate.predicate": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.predicate.predicate"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score": {
      "begin": "(score) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.score"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.score.target": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.score.target"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.\u003c": {
      "begin": "(\u003c) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.score.target.targetObjective.\u003c.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.\u003c.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.\u003c=": {
      "begin": "(\u003c=) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c="
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.score.target.targetObjective.\u003c=.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c=.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.\u003c=.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003c=.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.=": {
      "begin": "(=) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.score.target.targetObjective.="
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.score.target.targetObjective.=.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.score.target.targetObjective.=.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.=.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.=.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.\u003e": {
      "begin": "(\u003e) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.score.target.targetObjective.\u003e.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.\u003e.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.\u003e=": {
      "begin": "(\u003e=) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e="
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.score.target.targetObjective.\u003e=.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e=.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.\u003e=.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.\u003e=.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.if.score.target.targetObjective.matches": {
      "begin": "(matches) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.if.score.target.targetObjective.matches"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.if.score.target.targetObjective.matches.range": {
      "patterns": [
        {
          "begin": "(\\-?\\d+)(\\.\\.)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.matches.range"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "begin": "(\\-?\\d+)?(\\.\\.)(\\-?\\d+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.matches.range"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "begin": "(\\-?\\d+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.if.score.target.targetObjective.matches.range"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.in": {
      "begin": "(in) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.in"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.in.dimension": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.in.dimension"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.positioned": {
      "begin": "(positioned) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.positioned"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.positioned.as": {
      "begin": "(as) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.positioned.as"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.positioned.as.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.positioned.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.positioned.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.positioned.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.positioned.as.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.positioned.pos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.positioned.pos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.positioned.pos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.rotated": {
      "begin": "(rotated) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.rotated"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.rotated.as": {
      "begin": "(as) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.rotated.as"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.rotated.as.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.rotated.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.rotated.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.rotated.as.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.rotated.as.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.rotated.rot": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.rotated.rot"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.run": {
      "begin": "(run) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.run"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store": {
      "begin": "(store) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result": {
      "begin": "(result) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.block.targetPos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.block.targetPos.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.result.block.targetPos.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.block.targetPos.path.byte": {
      "begin": "(byte) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.block.targetPos.path.byte"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.block.targetPos.path.byte.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.block.targetPos.path.byte.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.block.targetPos.path.double": {
      "begin": "(double) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.block.targetPos.path.double"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.block.targetPos.path.double.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.block.targetPos.path.double.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.block.targetPos.path.float": {
      "begin": "(float) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.block.targetPos.path.float"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.block.targetPos.path.float.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.block.targetPos.path.float.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.block.targetPos.path.int": {
      "begin": "(int) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.block.targetPos.path.int"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.block.targetPos.path.int.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.block.targetPos.path.int.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.block.targetPos.path.long": {
      "begin": "(long) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.block.targetPos.path.long"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.block.targetPos.path.long.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.block.targetPos.path.long.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.block.targetPos.path.short": {
      "begin": "(short) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.block.targetPos.path.short"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.block.targetPos.path.short.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.block.targetPos.path.short.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.bossbar": {
      "begin": "(bossbar) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.bossbar"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.bossbar.id": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.bossbar.id"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.bossbar.id.max": {
      "begin": "(max) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.bossbar.id.max"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.bossbar.id.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.bossbar.id.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.entity.target": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.result.entity.target"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.entity.target.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.result.entity.target.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.entity.target.path.byte": {
      "begin": "(byte) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.entity.target.path.byte"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.entity.target.path.byte.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target.path.byte.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.entity.target.path.double": {
      "begin": "(double) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.entity.target.path.double"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.entity.target.path.double.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target.path.double.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.entity.target.path.float": {
      "begin": "(float) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.entity.target.path.float"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.entity.target.path.float.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target.path.float.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.entity.target.path.int": {
      "begin": "(int) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.entity.target.path.int"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.entity.target.path.int.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target.path.int.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.entity.target.path.long": {
      "begin": "(long) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.entity.target.path.long"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.entity.target.path.long.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target.path.long.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.entity.target.path.short": {
      "begin": "(short) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.entity.target.path.short"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.entity.target.path.short.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.entity.target.path.short.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.score": {
      "begin": "(score) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.score"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.score.targets": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.result.score.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.score.targets.objective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.score.targets.objective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.storage.target": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.storage.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.storage.target.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.result.storage.target.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.storage.target.path.byte": {
      "begin": "(byte) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.storage.target.path.byte"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.storage.target.path.byte.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.storage.target.path.byte.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.storage.target.path.double": {
      "begin": "(double) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.storage.target.path.double"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.storage.target.path.double.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.storage.target.path.double.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.storage.target.path.float": {
      "begin": "(float) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.storage.target.path.float"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.storage.target.path.float.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.storage.target.path.float.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.storage.target.path.int": {
      "begin": "(int) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.storage.target.path.int"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.storage.target.path.int.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.storage.target.path.int.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.storage.target.path.long": {
      "begin": "(long) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.storage.target.path.long"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.storage.target.path.long.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.storage.target.path.long.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.result.storage.target.path.short": {
      "begin": "(short) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.result.storage.target.path.short"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.result.storage.target.path.short.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.result.storage.target.path.short.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success": {
      "begin": "(success) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.block.targetPos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.block.targetPos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.block.targetPos.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.success.block.targetPos.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.block.targetPos.path.byte": {
      "begin": "(byte) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.block.targetPos.path.byte"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.block.targetPos.path.byte.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.block.targetPos.path.byte.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.block.targetPos.path.double": {
      "begin": "(double) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.block.targetPos.path.double"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.block.targetPos.path.double.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.block.targetPos.path.double.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.block.targetPos.path.float": {
      "begin": "(float) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.block.targetPos.path.float"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.block.targetPos.path.float.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.block.targetPos.path.float.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.block.targetPos.path.int": {
      "begin": "(int) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.block.targetPos.path.int"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.block.targetPos.path.int.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.block.targetPos.path.int.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.block.targetPos.path.long": {
      "begin": "(long) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.block.targetPos.path.long"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.block.targetPos.path.long.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.block.targetPos.path.long.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.block.targetPos.path.short": {
      "begin": "(short) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.block.targetPos.path.short"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.block.targetPos.path.short.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.block.targetPos.path.short.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.bossbar": {
      "begin": "(bossbar) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.bossbar"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.bossbar.id": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.bossbar.id"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.bossbar.id.max": {
      "begin": "(max) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.bossbar.id.max"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.bossbar.id.value": {
      "begin": "(value) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.bossbar.id.value"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.entity.target": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.success.entity.target"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.entity.target.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.success.entity.target.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.entity.target.path.byte": {
      "begin": "(byte) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.entity.target.path.byte"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.entity.target.path.byte.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target.path.byte.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.entity.target.path.double": {
      "begin": "(double) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.entity.target.path.double"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.entity.target.path.double.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target.path.double.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.entity.target.path.float": {
      "begin": "(float) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.entity.target.path.float"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.entity.target.path.float.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target.path.float.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.entity.target.path.int": {
      "begin": "(int) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.entity.target.path.int"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.entity.target.path.int.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target.path.int.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.entity.target.path.long": {
      "begin": "(long) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.entity.target.path.long"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.entity.target.path.long.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target.path.long.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.entity.target.path.short": {
      "begin": "(short) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.entity.target.path.short"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.entity.target.path.short.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.entity.target.path.short.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.score": {
      "begin": "(score) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.score"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.score.targets": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.score.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.success.score.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.score.targets.objective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.score.targets.objective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.storage.target": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.storage.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.storage.target.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.store.success.storage.target.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.storage.target.path.byte": {
      "begin": "(byte) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.storage.target.path.byte"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.storage.target.path.byte.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.storage.target.path.byte.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.storage.target.path.double": {
      "begin": "(double) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.storage.target.path.double"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.storage.target.path.double.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.storage.target.path.double.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.storage.target.path.float": {
      "begin": "(float) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.storage.target.path.float"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.storage.target.path.float.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.storage.target.path.float.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.storage.target.path.int": {
      "begin": "(int) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.storage.target.path.int"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.storage.target.path.int.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.storage.target.path.int.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.storage.target.path.long": {
      "begin": "(long) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.storage.target.path.long"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.storage.target.path.long.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.storage.target.path.long.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.store.success.storage.target.path.short": {
      "begin": "(short) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.store.success.storage.target.path.short"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.store.success.storage.target.path.short.scale": {
      "patterns": [
        {
          "begin": "(\\-?\\d*\\.?\\d+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.store.success.storage.target.path.short.scale"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless": {
      "begin": "(unless) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.block.pos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.block.pos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.block.pos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.block.pos.block": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.block.pos.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        },
        {
          "begin": "(\\#)(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.block.pos.block"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.hash.tagged_resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.namespace.tagged_resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.colon.tagged_resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.tagged_resource_location.mcfunction"
            },
            "5": {
              "name": "entity.name.function._.path.tagged_resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.blocks": {
      "begin": "(blocks) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.blocks"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.blocks.start": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.blocks.start"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.blocks.start"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.blocks.start.end": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.blocks.start.end"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.blocks.start.end"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.blocks.start.end.destination": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.blocks.start.end.destination"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.blocks.start.end.destination"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.blocks.start.end.destination.all": {
      "begin": "(all)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.blocks.start.end.destination.all"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.blocks.start.end.destination.masked": {
      "begin": "(masked)( |(?=\\n))",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.blocks.start.end.destination.masked"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.data": {
      "begin": "(data) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.data"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.data.block": {
      "begin": "(block) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.data.block"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.data.block.sourcePos": {
      "patterns": [
        {
          "begin": "(?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?:(\\~)(\\-?\\d+)?|(\\-?\\d+)) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.data.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "begin": "(\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (\\^)(\\-?\\d+)? (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.data.block.sourcePos"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.data.block.sourcePos.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.data.block.sourcePos.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.data.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.data.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.data.entity.source": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.data.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.data.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.data.entity.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.data.entity.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.data.entity.source.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.data.entity.source.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.data.storage": {
      "begin": "(storage) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.data.storage"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.data.storage.source": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.data.storage.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.data.storage.source.path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(?= |\\n)( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.data.storage.source.path"
                }
              ]
            },
            {
              "include": "#nbt_path.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.entity": {
      "begin": "(entity) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.entity"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.entity.entities": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.entity.entities"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.entity.entities"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.entity.entities"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.entity.entities"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.predicate": {
      "begin": "(predicate) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.predicate"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.predicate.predicate": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.predicate.predicate"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score": {
      "begin": "(score) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.score"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.score.target": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.score.target"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003c": {
      "begin": "(\u003c) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003c.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003c.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003c=": {
      "begin": "(\u003c=) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c="
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003c=.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c=.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003c=.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003c=.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.=": {
      "begin": "(=) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.score.target.targetObjective.="
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.score.target.targetObjective.=.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.score.target.targetObjective.=.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.=.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.=.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003e": {
      "begin": "(\u003e) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003e.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003e.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003e=": {
      "begin": "(\u003e=) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e="
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003e=.source": {
      "patterns": [
        {
          "begin": "(\\*) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.all.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "([\\w\\.\\-\\#\\$\\%]+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.fakeplayer.score_holder.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e=.source"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e=.source"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.\u003e=.source.sourceObjective": {
      "patterns": [
        {
          "begin": "([\\w\\.\\-\\+]+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.\u003e=.source.sourceObjective"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.execute.unless.score.target.targetObjective.matches": {
      "begin": "(matches) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.execute.unless.score.target.targetObjective.matches"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      }
    },
    "generated.command.execute.unless.score.target.targetObjective.matches.range": {
      "patterns": [
        {
          "begin": "(\\-?\\d+)(\\.\\.)(\\-?\\d+)?( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.matches.range"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "begin": "(\\-?\\d+)?(\\.\\.)(\\-?\\d+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.matches.range"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "begin": "(\\-?\\d+)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.execute.unless.score.target.targetObjective.matches.range"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.function": {
      "begin": "(function) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.function"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.function.name": {
      "patterns": [
        {
          "begin": "(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.function.name"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        },
        {
          "begin": "(\\#)(?:([a-z0-9_\\.\\-]+)(\\:))?([a-z0-9_\\.\\-]+)((?:\\/?[a-z0-9_\\.\\-]+)*)( |(?=\\n))",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.function.name"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "entity.name.function._.hash.tagged_resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.namespace.tagged_resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.colon.tagged_resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.tagged_resource_location.mcfunction"
            },
            "5": {
              "name": "entity.name.function._.path.tagged_resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.say": {
      "begin": "(say) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.say"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.say.message": {
      "patterns": [
        {
          "include": "#common.message"
        }
      ]
    },
    "generated.command.tellraw": {
      "begin": "(tellraw) (?=\\S)",
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#generated.commands.tellraw"
        }
      ],
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      }
    },
    "generated.command.tellraw.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          }
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\w+) (?=\\S)",
          "end": "(?=\\n)",
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          }
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "patterns": [
            {
              "begin": "(\\]) (?=\\S)",
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#generated.commands.tellraw.targets"
                }
              ],
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              }
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "generated.command.tellraw.targets.message": {
      "patterns": [
        {
          "include": "#text_component"
        }
      ]
    },
    "generated.commands": {
      "patterns": [
        {
          "include": "#generated.command.data"
        },
        {
          "include": "#generated.command.effect"
        },
        {
          "include": "#generated.command.execute"
        },
        {
          "include": "#generated.command.function"
        },
        {
          "include": "#generated.command.say"
        },
        {
          "include": "#generated.command.tellraw"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data": {
      "patterns": [
        {
          "include": "#generated.command.data.get"
        },
        {
          "include": "#generated.command.data.merge"
        },
        {
          "include": "#generated.command.data.modify"
        },
        {
          "include": "#generated.command.data.remove"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get": {
      "patterns": [
        {
          "include": "#generated.command.data.get.block"
        },
        {
          "include": "#generated.command.data.get.entity"
        },
        {
          "include": "#generated.command.data.get.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.block": {
      "patterns": [
        {
          "include": "#generated.command.data.get.block.targetPos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.block.targetPos": {
      "patterns": [
        {
          "include": "#generated.command.data.get.block.targetPos.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.block.targetPos.path": {
      "patterns": [
        {
          "include": "#generated.command.data.get.block.targetPos.path.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.block.targetPos.path.scale": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.get.entity.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.entity.target": {
      "patterns": [
        {
          "include": "#generated.command.data.get.entity.target.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.entity.target.path": {
      "patterns": [
        {
          "include": "#generated.command.data.get.entity.target.path.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.entity.target.path.scale": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.get.storage.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.storage.target": {
      "patterns": [
        {
          "include": "#generated.command.data.get.storage.target.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.storage.target.path": {
      "patterns": [
        {
          "include": "#generated.command.data.get.storage.target.path.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.get.storage.target.path.scale": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge": {
      "patterns": [
        {
          "include": "#generated.command.data.merge.block"
        },
        {
          "include": "#generated.command.data.merge.entity"
        },
        {
          "include": "#generated.command.data.merge.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.block": {
      "patterns": [
        {
          "include": "#generated.command.data.merge.block.targetPos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.block.targetPos": {
      "patterns": [
        {
          "include": "#generated.command.data.merge.block.targetPos.nbt"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.block.targetPos.nbt": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.merge.entity.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.entity.target": {
      "patterns": [
        {
          "include": "#generated.command.data.merge.entity.target.nbt"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.entity.target.nbt": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.merge.storage.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.storage.target": {
      "patterns": [
        {
          "include": "#generated.command.data.merge.storage.target.nbt"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.merge.storage.target.nbt": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block"
        },
        {
          "include": "#generated.command.data.modify.entity"
        },
        {
          "include": "#generated.command.data.modify.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.block"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.entity"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.append.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.append.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.block"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.entity"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.insert.index.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.insert.index.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.block"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.entity"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.merge.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.merge.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.block"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.entity"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.prepend.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.prepend.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.block"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.entity"
        },
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.block.targetPos.targetPath.set.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.block.targetPos.targetPath.set.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.block"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.entity"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.append.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.append.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.block"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.entity"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.insert.index.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.insert.index.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.block"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.entity"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.merge.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.merge.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.block"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.entity"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.prepend.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.prepend.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.block"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.entity"
        },
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.entity.target.targetPath.set.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.entity.target.targetPath.set.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.block"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.entity"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.append.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.append.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.block"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.entity"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.insert.index.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.insert.index.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.block"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.entity"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.merge.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.merge.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.block"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.entity"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.prepend.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.prepend.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.block"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.entity"
        },
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.block": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.block.sourcePos.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.block.sourcePos.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.entity.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.entity.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.from.storage.source.sourcePath"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.from.storage.source.sourcePath": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.value": {
      "patterns": [
        {
          "include": "#generated.command.data.modify.storage.target.targetPath.set.value.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.modify.storage.target.targetPath.set.value.value": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove": {
      "patterns": [
        {
          "include": "#generated.command.data.remove.block"
        },
        {
          "include": "#generated.command.data.remove.entity"
        },
        {
          "include": "#generated.command.data.remove.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.block": {
      "patterns": [
        {
          "include": "#generated.command.data.remove.block.targetPos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.block.targetPos": {
      "patterns": [
        {
          "include": "#generated.command.data.remove.block.targetPos.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.block.targetPos.path": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.entity": {
      "patterns": [
        {
          "include": "#generated.command.data.remove.entity.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.entity.target": {
      "patterns": [
        {
          "include": "#generated.command.data.remove.entity.target.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.entity.target.path": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.storage": {
      "patterns": [
        {
          "include": "#generated.command.data.remove.storage.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.storage.target": {
      "patterns": [
        {
          "include": "#generated.command.data.remove.storage.target.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.data.remove.storage.target.path": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect": {
      "patterns": [
        {
          "include": "#generated.command.effect.clear"
        },
        {
          "include": "#generated.command.effect.give"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.clear": {
      "patterns": [
        {
          "include": "#generated.command.effect.clear.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.clear.targets": {
      "patterns": [
        {
          "include": "#generated.command.effect.clear.targets.effect"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.clear.targets.effect": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.give": {
      "patterns": [
        {
          "include": "#generated.command.effect.give.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.give.targets": {
      "patterns": [
        {
          "include": "#generated.command.effect.give.targets.effect"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.give.targets.effect": {
      "patterns": [
        {
          "include": "#generated.command.effect.give.targets.effect.seconds"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.give.targets.effect.seconds": {
      "patterns": [
        {
          "include": "#generated.command.effect.give.targets.effect.seconds.amplifier"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.give.targets.effect.seconds.amplifier": {
      "patterns": [
        {
          "include": "#generated.command.effect.give.targets.effect.seconds.amplifier.hideParticles"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.effect.give.targets.effect.seconds.amplifier.hideParticles": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute": {
      "patterns": [
        {
          "include": "#generated.command.execute.align"
        },
        {
          "include": "#generated.command.execute.anchored"
        },
        {
          "include": "#generated.command.execute.as"
        },
        {
          "include": "#generated.command.execute.at"
        },
        {
          "include": "#generated.command.execute.facing"
        },
        {
          "include": "#generated.command.execute.if"
        },
        {
          "include": "#generated.command.execute.in"
        },
        {
          "include": "#generated.command.execute.positioned"
        },
        {
          "include": "#generated.command.execute.rotated"
        },
        {
          "include": "#generated.command.execute.run"
        },
        {
          "include": "#generated.command.execute.store"
        },
        {
          "include": "#generated.command.execute.unless"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.align": {
      "patterns": [
        {
          "include": "#generated.command.execute.align.axes"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.align.axes": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.anchored": {
      "patterns": [
        {
          "include": "#generated.command.execute.anchored.anchor"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.anchored.anchor": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.as": {
      "patterns": [
        {
          "include": "#generated.command.execute.as.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.as.targets": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.at": {
      "patterns": [
        {
          "include": "#generated.command.execute.at.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.at.targets": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.facing": {
      "patterns": [
        {
          "include": "#generated.command.execute.facing.entity"
        },
        {
          "include": "#generated.command.execute.facing.pos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.facing.entity": {
      "patterns": [
        {
          "include": "#generated.command.execute.facing.entity.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.facing.entity.targets": {
      "patterns": [
        {
          "include": "#generated.command.execute.facing.entity.targets.anchor"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.facing.entity.targets.anchor": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.facing.pos": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.block"
        },
        {
          "include": "#generated.command.execute.if.blocks"
        },
        {
          "include": "#generated.command.execute.if.data"
        },
        {
          "include": "#generated.command.execute.if.entity"
        },
        {
          "include": "#generated.command.execute.if.predicate"
        },
        {
          "include": "#generated.command.execute.if.score"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.block": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.block.pos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.block.pos": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.block.pos.block"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.block.pos.block": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.blocks": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.blocks.start"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.blocks.start": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.blocks.start.end"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.blocks.start.end": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.blocks.start.end.destination"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.blocks.start.end.destination": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.blocks.start.end.destination.all"
        },
        {
          "include": "#generated.command.execute.if.blocks.start.end.destination.masked"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.blocks.start.end.destination.all": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.blocks.start.end.destination.masked": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.data.block"
        },
        {
          "include": "#generated.command.execute.if.data.entity"
        },
        {
          "include": "#generated.command.execute.if.data.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.block": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.data.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.data.block.sourcePos.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.block.sourcePos.path": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.entity": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.data.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.data.entity.source.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.entity.source.path": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.storage": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.data.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.data.storage.source.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.data.storage.source.path": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.entity": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.entity.entities"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.entity.entities": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.predicate": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.predicate.predicate"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.predicate.predicate": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003c"
        },
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003c="
        },
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.="
        },
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003e"
        },
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003e="
        },
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.matches"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003c": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003c.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003c.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003c.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003c.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003c=": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003c=.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003c=.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003c=.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003c=.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.=": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.=.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.=.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.=.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.=.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003e": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003e.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003e.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003e.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003e.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003e=": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003e=.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003e=.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.\u003e=.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.\u003e=.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.matches": {
      "patterns": [
        {
          "include": "#generated.command.execute.if.score.target.targetObjective.matches.range"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.if.score.target.targetObjective.matches.range": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.in": {
      "patterns": [
        {
          "include": "#generated.command.execute.in.dimension"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.in.dimension": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.positioned": {
      "patterns": [
        {
          "include": "#generated.command.execute.positioned.as"
        },
        {
          "include": "#generated.command.execute.positioned.pos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.positioned.as": {
      "patterns": [
        {
          "include": "#generated.command.execute.positioned.as.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.positioned.as.targets": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.positioned.pos": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.rotated": {
      "patterns": [
        {
          "include": "#generated.command.execute.rotated.as"
        },
        {
          "include": "#generated.command.execute.rotated.rot"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.rotated.as": {
      "patterns": [
        {
          "include": "#generated.command.execute.rotated.as.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.rotated.as.targets": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.rotated.rot": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.run": {
      "patterns": [
        {
          "include": "#generated.commands"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result"
        },
        {
          "include": "#generated.command.execute.store.success"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block"
        },
        {
          "include": "#generated.command.execute.store.result.bossbar"
        },
        {
          "include": "#generated.command.execute.store.result.entity"
        },
        {
          "include": "#generated.command.execute.store.result.score"
        },
        {
          "include": "#generated.command.execute.store.result.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.byte"
        },
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.double"
        },
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.float"
        },
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.int"
        },
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.long"
        },
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.short"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.byte": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.byte.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.byte.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.double": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.double.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.double.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.float": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.float.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.float.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.int": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.int.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.int.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.long": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.long.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.long.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.short": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.block.targetPos.path.short.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.block.targetPos.path.short.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.bossbar": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.bossbar.id"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.bossbar.id": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.bossbar.id.max"
        },
        {
          "include": "#generated.command.execute.store.result.bossbar.id.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.bossbar.id.max": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.bossbar.id.value": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target.path.byte"
        },
        {
          "include": "#generated.command.execute.store.result.entity.target.path.double"
        },
        {
          "include": "#generated.command.execute.store.result.entity.target.path.float"
        },
        {
          "include": "#generated.command.execute.store.result.entity.target.path.int"
        },
        {
          "include": "#generated.command.execute.store.result.entity.target.path.long"
        },
        {
          "include": "#generated.command.execute.store.result.entity.target.path.short"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.byte": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target.path.byte.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.byte.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.double": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target.path.double.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.double.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.float": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target.path.float.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.float.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.int": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target.path.int.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.int.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.long": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target.path.long.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.long.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.short": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.entity.target.path.short.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.entity.target.path.short.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.score": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.score.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.score.targets": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.score.targets.objective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.score.targets.objective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target.path.byte"
        },
        {
          "include": "#generated.command.execute.store.result.storage.target.path.double"
        },
        {
          "include": "#generated.command.execute.store.result.storage.target.path.float"
        },
        {
          "include": "#generated.command.execute.store.result.storage.target.path.int"
        },
        {
          "include": "#generated.command.execute.store.result.storage.target.path.long"
        },
        {
          "include": "#generated.command.execute.store.result.storage.target.path.short"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.byte": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target.path.byte.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.byte.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.double": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target.path.double.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.double.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.float": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target.path.float.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.float.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.int": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target.path.int.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.int.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.long": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target.path.long.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.long.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.short": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.result.storage.target.path.short.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.result.storage.target.path.short.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block"
        },
        {
          "include": "#generated.command.execute.store.success.bossbar"
        },
        {
          "include": "#generated.command.execute.store.success.entity"
        },
        {
          "include": "#generated.command.execute.store.success.score"
        },
        {
          "include": "#generated.command.execute.store.success.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.byte"
        },
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.double"
        },
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.float"
        },
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.int"
        },
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.long"
        },
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.short"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.byte": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.byte.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.byte.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.double": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.double.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.double.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.float": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.float.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.float.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.int": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.int.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.int.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.long": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.long.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.long.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.short": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.block.targetPos.path.short.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.block.targetPos.path.short.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.bossbar": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.bossbar.id"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.bossbar.id": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.bossbar.id.max"
        },
        {
          "include": "#generated.command.execute.store.success.bossbar.id.value"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.bossbar.id.max": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.bossbar.id.value": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target.path.byte"
        },
        {
          "include": "#generated.command.execute.store.success.entity.target.path.double"
        },
        {
          "include": "#generated.command.execute.store.success.entity.target.path.float"
        },
        {
          "include": "#generated.command.execute.store.success.entity.target.path.int"
        },
        {
          "include": "#generated.command.execute.store.success.entity.target.path.long"
        },
        {
          "include": "#generated.command.execute.store.success.entity.target.path.short"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.byte": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target.path.byte.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.byte.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.double": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target.path.double.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.double.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.float": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target.path.float.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.float.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.int": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target.path.int.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.int.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.long": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target.path.long.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.long.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.short": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.entity.target.path.short.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.entity.target.path.short.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.score": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.score.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.score.targets": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.score.targets.objective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.score.targets.objective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target.path.byte"
        },
        {
          "include": "#generated.command.execute.store.success.storage.target.path.double"
        },
        {
          "include": "#generated.command.execute.store.success.storage.target.path.float"
        },
        {
          "include": "#generated.command.execute.store.success.storage.target.path.int"
        },
        {
          "include": "#generated.command.execute.store.success.storage.target.path.long"
        },
        {
          "include": "#generated.command.execute.store.success.storage.target.path.short"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.byte": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target.path.byte.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.byte.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.double": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target.path.double.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.double.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.float": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target.path.float.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.float.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.int": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target.path.int.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.int.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.long": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target.path.long.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.long.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.short": {
      "patterns": [
        {
          "include": "#generated.command.execute.store.success.storage.target.path.short.scale"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.store.success.storage.target.path.short.scale": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.block"
        },
        {
          "include": "#generated.command.execute.unless.blocks"
        },
        {
          "include": "#generated.command.execute.unless.data"
        },
        {
          "include": "#generated.command.execute.unless.entity"
        },
        {
          "include": "#generated.command.execute.unless.predicate"
        },
        {
          "include": "#generated.command.execute.unless.score"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.block": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.block.pos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.block.pos": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.block.pos.block"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.block.pos.block": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.blocks": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.blocks.start"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.blocks.start": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.blocks.start.end"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.blocks.start.end": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.blocks.start.end.destination"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.blocks.start.end.destination": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.blocks.start.end.destination.all"
        },
        {
          "include": "#generated.command.execute.unless.blocks.start.end.destination.masked"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.blocks.start.end.destination.all": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.blocks.start.end.destination.masked": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.data.block"
        },
        {
          "include": "#generated.command.execute.unless.data.entity"
        },
        {
          "include": "#generated.command.execute.unless.data.storage"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.block": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.data.block.sourcePos"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.block.sourcePos": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.data.block.sourcePos.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.block.sourcePos.path": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.entity": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.data.entity.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.entity.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.data.entity.source.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.entity.source.path": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.storage": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.data.storage.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.storage.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.data.storage.source.path"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.data.storage.source.path": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.entity": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.entity.entities"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.entity.entities": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.predicate": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.predicate.predicate"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.predicate.predicate": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003c"
        },
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003c="
        },
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.="
        },
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003e"
        },
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003e="
        },
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.matches"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003c": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003c.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003c.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003c.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003c.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003c=": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003c=.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003c=.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003c=.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003c=.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.=": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.=.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.=.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.=.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.=.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003e": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003e.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003e.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003e.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003e.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003e=": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003e=.source"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003e=.source": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.\u003e=.source.sourceObjective"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.\u003e=.source.sourceObjective": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.matches": {
      "patterns": [
        {
          "include": "#generated.command.execute.unless.score.target.targetObjective.matches.range"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.execute.unless.score.target.targetObjective.matches.range": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.function": {
      "patterns": [
        {
          "include": "#generated.command.function.name"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.function.name": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.say": {
      "patterns": [
        {
          "include": "#generated.command.say.message"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.say.message": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.tellraw": {
      "patterns": [
        {
          "include": "#generated.command.tellraw.targets"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.tellraw.targets": {
      "patterns": [
        {
          "include": "#generated.command.tellraw.targets.message"
        },
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "generated.commands.tellraw.targets.message": {
      "patterns": [
        {
          "include": "#common.trailing_whitespace"
        },
        {
          "include": "#error.unmatched_child"
        }
      ]
    },
    "nbt_compound": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(\\})|(?=\\n)",
          "patterns": [
            {
              "include": "#nbt_compound.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "nbt_compound.content": {
      "patterns": [
        {
          "include": "#common.block"
        }
      ]
    },
    "nbt_list": {
      "patterns": [
        {
          "begin": "(\\[)",
          "end": "(\\])|(?=\\n)",
          "patterns": [
            {
              "include": "#nbt_list.content"
            },
            {
              "include": "#error.bad_syntax"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        }
      ]
    },
    "nbt_list.content": {
      "patterns": [
        {
          "include": "#common.block"
        }
      ]
    },
    "nbt_path": {
      "patterns": [
        {
          "begin": "(\\w+)",
          "end": "(?= |\\n)",
          "patterns": [
            {
              "include": "#nbt_path.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        }
      ]
    },
    "nbt_path.content": {
      "patterns": [
        {
          "match": "(\\.)(\\w+)",
          "captures": {
            "1": {
              "name": "storage._.dot.nbt_path.mcfunction"
            },
            "2": {
              "name": "string._.property.nbt_path.mcfunction"
            }
          }
        },
        {
          "begin": "(\\[)",
          "end": "(\\])|(?=\\n)",
          "patterns": [
            {
              "include": "#nbt_path.index"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_list.mcfunction"
            }
          }
        },
        {
          "include": "#nbt_compound"
        },
        {
          "match": "(\\.)(?= |\\n)",
          "captures": {
            "1": {
              "name": "storage._.dot.nbt_path.mcfunction"
            }
          }
        },
        {
          "include": "#error.bad_syntax"
        }
      ]
    },
    "nbt_path.index": {
      "patterns": [
        {
          "match": "(?\u003c=\\[)(\\-?\\d+)(?=\\])",
          "captures": {
            "1": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        },
        {
          "include": "#nbt_compound"
        },
        {
          "include": "#error.bad_syntax"
        }
      ]
    },
    "score_map.content": {
      "patterns": [
        {
          "include": "#common.block"
        }
      ]
    },
    "target_selector.arguments": {
      "patterns": [
        {
          "include": "#target_selector.content.argument.xyz"
        },
        {
          "include": "#target_selector.content.argument.dxyz"
        },
        {
          "include": "#target_selector.content.argument.xy_rotation"
        },
        {
          "include": "#target_selector.content.argument.distance"
        },
        {
          "include": "#target_selector.content.argument.team"
        },
        {
          "include": "#target_selector.content.argument.tag"
        },
        {
          "include": "#target_selector.content.argument.name"
        },
        {
          "include": "#target_selector.content.argument.type"
        },
        {
          "include": "#target_selector.content.argument.level"
        },
        {
          "include": "#target_selector.content.argument.gamemode"
        },
        {
          "include": "#target_selector.content.argument.sort"
        },
        {
          "include": "#target_selector.content.argument.limit"
        },
        {
          "include": "#target_selector.content.argument.scores"
        },
        {
          "include": "#target_selector.content.argument.advancements"
        },
        {
          "include": "#target_selector.content.argument.nbt"
        }
      ]
    },
    "target_selector.content": {
      "patterns": [
        {
          "name": "meta._.argument_separator.content.target_selector.mcfunction",
          "match": "(?\u003c=[^\\[\\,])(\\,)(?= *\\w)",
          "captures": {
            "1": {
              "name": "support.class._.comma.target_selector.mcfunction"
            }
          }
        },
        {
          "match": "(?\u003c=[\\[\\,]) +(?=\\w)"
        },
        {
          "match": "(?\u003c=[^\\[\\,]) +(?=[\\]\\,])"
        },
        {
          "match": "(?\u003c=\\[) +(?=\\])"
        },
        {
          "include": "#target_selector.arguments"
        }
      ]
    },
    "target_selector.content.argument.advancements": {
      "patterns": [
        {
          "name": "meta._.advancements.argument.content.target_selector.mcfunction",
          "begin": "(advancements) *(\\=) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#advancement_map.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "storage._.bracket.advancement_map.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.advancement_map.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.distance": {
      "patterns": [
        {
          "name": "meta._.distance.argument.content.target_selector.mcfunction",
          "begin": "(distance) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.double_range"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.dxyz": {
      "patterns": [
        {
          "name": "meta._.dxyz.argument.content.target_selector.mcfunction",
          "match": "(dx|dy|dz) *(\\=) *(\\-?\\d*\\.?\\d+) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.gamemode": {
      "patterns": [
        {
          "name": "meta._.gamemode.argument.content.target_selector.mcfunction",
          "match": "(gamemode) *(\\=) *(\\!?) *(survival|creative|adventure|spectator) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "keyword._.keyword.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.level": {
      "patterns": [
        {
          "name": "meta._.level.argument.content.target_selector.mcfunction",
          "begin": "(level) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.integer_range"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.limit": {
      "patterns": [
        {
          "name": "meta._.limit.argument.content.target_selector.mcfunction",
          "match": "(limit) *(\\=) *(0*[1-9]\\d*) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.name": {
      "patterns": [
        {
          "name": "meta._.name.argument.content.target_selector.mcfunction",
          "begin": "(name) *(\\=) *(\\!?) *",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.quotable_string"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.nbt": {
      "patterns": [
        {
          "name": "meta._.nbt.argument.content.target_selector.mcfunction",
          "begin": "(nbt) *(\\=) *(\\!?) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#nbt_compound.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.scores": {
      "patterns": [
        {
          "name": "meta._.scores.argument.content.target_selector.mcfunction",
          "begin": "(scores) *(\\=) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#score_map.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "storage._.bracket.score_map.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.score_map.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.sort": {
      "patterns": [
        {
          "name": "meta._.sort.argument.content.target_selector.mcfunction",
          "match": "(sort) *(\\=) *(arbitrary|furthest|nearest|random) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "keyword._.keyword.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.tag": {
      "patterns": [
        {
          "name": "meta._.tag.argument.content.target_selector.mcfunction",
          "match": "(tag) *(\\=) *(\\!?) *([\\w\\.\\-\\+]+)? *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "entity.other.attribute-name._.entity_tag.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.team": {
      "patterns": [
        {
          "name": "meta._.team.argument.content.target_selector.mcfunction",
          "match": "(team) *(\\=) *(\\!?) *([\\w\\.\\-\\+]+)? *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "entity.other.attribute-name._.scoreboard_team.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.type": {
      "patterns": [
        {
          "name": "meta._.type.argument.content.target_selector.mcfunction",
          "begin": "(type) *(\\=) *(\\!?) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.taggable_resource_location"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.xy_rotation": {
      "patterns": [
        {
          "name": "meta._.xy_rotation.argument.content.target_selector.mcfunction",
          "begin": "(x_rotation|y_rotation) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "patterns": [
            {
              "include": "#common.double_range"
            },
            {
              "include": "#error.command_line"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.xyz": {
      "patterns": [
        {
          "name": "meta._.xyz.argument.content.target_selector.mcfunction",
          "match": "(x|y|z) *(\\=) *(\\-?\\d*\\.?\\d+) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "text_component": {
      "patterns": [
        {
          "include": "#text_component.boolean"
        },
        {
          "include": "#text_component.number"
        },
        {
          "include": "#text_component.string"
        },
        {
          "include": "#text_component.list"
        },
        {
          "include": "#text_component.dict"
        }
      ]
    },
    "text_component.atomic": {
      "patterns": [
        {
          "include": "#text_component.boolean"
        },
        {
          "include": "#text_component.number"
        },
        {
          "include": "#text_component.string"
        }
      ]
    },
    "text_component.boolean": {
      "patterns": [
        {
          "include": "#common.boolean"
        }
      ]
    },
    "text_component.command_string": {
      "patterns": [
        {
          "begin": "(\\\")(\\/)",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#commands"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "keyword.control._.command.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#text_component.dict_common"
            },
            {
              "include": "#text_component.properties"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict.click_event": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#text_component.dict_common"
            },
            {
              "include": "#text_component.properties.click_event"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict.hover_event": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#text_component.dict_common"
            },
            {
              "include": "#text_component.properties.hover_event"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict.score": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "patterns": [
            {
              "include": "#text_component.dict_common"
            },
            {
              "include": "#text_component.properties.score"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.dict_common": {
      "patterns": [
        {
          "match": "(?\u003c=[^\\{\\,])(\\,)(?=[^\\}\\,])",
          "captures": {
            "1": {
              "name": "storage._.comma.text_component.mcfunction"
            }
          }
        },
        {
          "include": "#common.dict.whitespace"
        }
      ]
    },
    "text_component.list": {
      "patterns": [
        {
          "begin": "(\\[)",
          "end": "(?=\\n)|(\\])",
          "patterns": [
            {
              "include": "#text_component.list_common"
            },
            {
              "include": "#text_component.list_values"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.bracket.text_component.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.list_common": {
      "patterns": [
        {
          "match": "(?\u003c=[^\\[\\,])(\\,)(?=[^\\]\\,])",
          "captures": {
            "1": {
              "name": "storage._.comma.text_component.mcfunction"
            }
          }
        },
        {
          "include": "#common.list.whitespace"
        }
      ]
    },
    "text_component.list_values": {
      "patterns": [
        {
          "include": "#text_component"
        },
        {
          "include": "#error.list_value"
        }
      ]
    },
    "text_component.nbt_compound_string": {
      "patterns": [
        {
          "begin": "(\\\")(?=\\{)",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#nbt_compound"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.number": {
      "patterns": [
        {
          "include": "#common.number"
        }
      ]
    },
    "text_component.properties": {
      "patterns": [
        {
          "include": "#text_component.property.b_i_u_s_o"
        },
        {
          "include": "#text_component.property.color"
        },
        {
          "include": "#text_component.property.text_translate"
        },
        {
          "include": "#text_component.property.extra_with"
        },
        {
          "include": "#text_component.property.selector"
        },
        {
          "include": "#text_component.property.score"
        },
        {
          "include": "#text_component.property.keybind"
        },
        {
          "include": "#text_component.property.insertion"
        },
        {
          "include": "#text_component.property.click_event"
        },
        {
          "include": "#text_component.property.hover_event"
        },
        {
          "include": "#text_component.property.nbt"
        },
        {
          "include": "#text_component.property.entity"
        },
        {
          "include": "#text_component.property.block"
        },
        {
          "include": "#text_component.property.interpret"
        },
        {
          "include": "#error.compound_value"
        }
      ]
    },
    "text_component.properties.click_event": {
      "patterns": [
        {
          "include": "#text_component.property.click_event.action"
        },
        {
          "include": "#text_component.property.click_event.value"
        },
        {
          "include": "#error.compound_value"
        }
      ]
    },
    "text_component.properties.hover_event": {
      "patterns": [
        {
          "include": "#text_component.property.hover_event.action"
        },
        {
          "include": "#text_component.property.hover_event.value"
        },
        {
          "include": "#error.compound_value"
        }
      ]
    },
    "text_component.properties.score": {
      "patterns": [
        {
          "include": "#text_component.property.score.name"
        },
        {
          "include": "#text_component.property.score.objective"
        },
        {
          "include": "#text_component.property.score.value"
        },
        {
          "include": "#error.compound_value"
        }
      ]
    },
    "text_component.property.b_i_u_s_o": {
      "patterns": [
        {
          "begin": "(\\\")(bold|italic|underlined|strikethrough|obfuscated)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.boolean"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.block": {
      "patterns": [
        {
          "begin": "(\\\")(block)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.position"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.click_event": {
      "patterns": [
        {
          "begin": "(\\\")(clickEvent)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.dict.click_event"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.click_event.action": {
      "patterns": [
        {
          "begin": "(\\\")(action)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.click_event"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.click_event.value": {
      "patterns": [
        {
          "begin": "(\\\")(value)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.command_string"
            },
            {
              "include": "#text_component.string"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.color": {
      "patterns": [
        {
          "begin": "(\\\")(color)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.color"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.entity": {
      "patterns": [
        {
          "begin": "(\\\")(entity)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.target"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.extra_with": {
      "patterns": [
        {
          "begin": "(\\\")(extra|with)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.list"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.hover_event": {
      "patterns": [
        {
          "begin": "(\\\")(hoverEvent)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.dict.hover_event"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.hover_event.action": {
      "patterns": [
        {
          "begin": "(\\\")(action)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.hover_event"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.hover_event.value": {
      "patterns": [
        {
          "begin": "(\\\")(value)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.nbt_compound_string"
            },
            {
              "include": "#text_component"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.insertion": {
      "patterns": [
        {
          "begin": "(\\\")(insertion)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.command_string"
            },
            {
              "include": "#text_component.string"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.interpret": {
      "patterns": [
        {
          "begin": "(\\\")(interpret)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.boolean"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.keybind": {
      "patterns": [
        {
          "begin": "(\\\")(keybind)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.keybind"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.nbt": {
      "patterns": [
        {
          "begin": "(\\\")(nbt)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.nbt"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.score": {
      "patterns": [
        {
          "begin": "(\\\")(score)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.dict.score"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.score.name": {
      "patterns": [
        {
          "begin": "(\\\")(name)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.score_holder"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.score.objective": {
      "patterns": [
        {
          "begin": "(\\\")(objective)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.objective"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.score.value": {
      "patterns": [
        {
          "begin": "(\\\")(value)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.atomic"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.selector": {
      "patterns": [
        {
          "begin": "(\\\")(selector)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.string.target"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.property.text_translate": {
      "patterns": [
        {
          "begin": "(\\\")(text|translate)(\\\") *(\\:) *(?=[^\\s\\,\\}])",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "patterns": [
            {
              "include": "#text_component.atomic"
            },
            {
              "include": "#error.compound_value"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.colon.nbt_compound.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string": {
      "patterns": [
        {
          "include": "#common.double_quoted_string"
        }
      ]
    },
    "text_component.string.click_event": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "name": "string._.event.property.text_component.mcfunction",
              "match": "(open_url|open_file|run_command|suggest_command|change_page)"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.color": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "name": "string._.color.property.text_component.mcfunction",
              "match": "(black|dark_blue|dark_green|dark_aqua|dark_red|dark_purple|gold|gray|dark_gray|blue|green|aqua|red|light_purple|yellow|white)"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.hover_event": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "name": "string._.event.property.text_component.mcfunction",
              "match": "(show_text|show_item|show_entity)"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.keybind": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "name": "string._.keybind.property.text_component.mcfunction",
              "match": "(key\\.forward|key\\.left|key\\.back|key\\.right|key\\.jump|key\\.sneak|key\\.sprint|key\\.inventory|key\\.swapHands|key\\.drop|key\\.use|key\\.attack|key\\.pickItem|key\\.chat|key\\.playerlist|key\\.command|key\\.screenshot|key\\.togglePerspective|key\\.smoothCamera|key\\.fullscreen|key\\.spectatorOutlines|key\\.hotbar\\.1|key\\.hotbar\\.2|key\\.hotbar\\.3|key\\.hotbar\\.4|key\\.hotbar\\.5|key\\.hotbar\\.6|key\\.hotbar\\.7|key\\.hotbar\\.8|key\\.hotbar\\.9|key\\.saveToolbarActivator|key\\.loadToolbarActivator)"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.nbt": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.nbt.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.nbt.content": {
      "patterns": [
        {
          "include": "#nbt_path"
        }
      ]
    },
    "text_component.string.objective": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.objective.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.objective.content": {
      "patterns": [
        {
          "name": "entity.other.attribute-name._.scoreboard_objective.mcfunction",
          "match": "(?\u003c=\\\")([\\w\\.\\-\\+]+)(?=\\\")"
        }
      ]
    },
    "text_component.string.position": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.position.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.position.content": {
      "patterns": [
        {
          "match": "(?\u003c=\\\")(?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+)) (?:(\\~)(\\-?\\d*\\.?\\d+)?|(\\-?\\d*\\.?\\d+))(?=\\\")",
          "captures": {
            "1": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "4": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "5": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            },
            "7": {
              "name": "keyword.control._.operator.relative.position.mcfunction"
            },
            "8": {
              "name": "constant.numeric._.number.relative.position.mcfunction"
            },
            "9": {
              "name": "constant.numeric._.number.absolute.position.mcfunction"
            }
          }
        },
        {
          "match": "(?\u003c=\\\")(\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)? (\\^)(\\-?\\d*\\.?\\d+)?(?=\\\")",
          "captures": {
            "1": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "2": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "3": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "4": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            },
            "5": {
              "name": "keyword.control._.operator.local.position.mcfunction"
            },
            "6": {
              "name": "constant.numeric._.number.local.position.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.score_holder": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.score_holder.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.score_holder.content": {
      "patterns": [
        {
          "name": "support.class._.all.score_holder.mcfunction",
          "match": "(?\u003c=\\\")(\\*)(?=\\\")"
        },
        {
          "name": "support.class._.fakeplayer.score_holder.mcfunction",
          "match": "(?\u003c=\\\")([\\w\\.\\-\\#\\$\\%]+)(?=\\\")"
        },
        {
          "include": "#text_component.string.target.content"
        }
      ]
    },
    "text_component.string.target": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "patterns": [
            {
              "include": "#text_component.string.target.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          }
        }
      ]
    },
    "text_component.string.target.content": {
      "patterns": [
        {
          "name": "support.class._.base.target_selector.mcfunction",
          "match": "(?\u003c=\\\")(\\@[parse])(?=\\\")"
        },
        {
          "name": "support.class._.uuid.target.mcfunction",
          "match": "(?\u003c=\\\")([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})(?=\\\")"
        },
        {
          "name": "support.class._.player_name.target.mcfunction",
          "match": "(?\u003c=\\\")(\\w+)(?=\\\")"
        },
        {
          "begin": "(?\u003c=\\\")(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)|(?=\\\")|(\\])(?=\\\")",
          "patterns": [
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.double_quoted_string.content"
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          }
        }
      ]
    },
    "unknown": {
      "name": "meta._.unknown.mcfunction",
      "match": "^((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    }
  }
}
